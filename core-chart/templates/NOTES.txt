If you are using `kflex` from KubeFlex release 0.6.1 or earlier then
you should wait for the KubeFlex control planes (of type other than
"host") that you just made to become "ready". The following commands
will do that.

echo "Waiting for new non-host KubeFlex Control Planes to be Ready:"
for cpname in {{- range $cp := (concat (.Values.ITSes | default list) (.Values.WDSes | default list) ) }}{{if ne $cp.type "host" }} {{ $cp.name }}{{end }}{{end }}; do
  while [[ `kubectl get cp $cpname -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}'` != "True" ]]; do
    echo "Waiting for \"$cpname\"..."
    sleep 5
  done
  echo "\"$cpname\" is ready."
done

For your convenience you will probably want to add contexts to your
kubeconfig named after the non-host-type control planes (WDSes and
ITSes) that you just created (a host-type control plane is just an
alias for the KubeFlex hosting cluster). You can do that with the
following `kflex` commands; each creates a context and makes it the
current one. See
https://github.com/kubestellar/kubestellar/blob/main/docs/content/direct/core-chart.md#obtaining-the-control-planes-kubeconfigs
(replace "main" with "\{\{ .Values.KUBESTELLAR_VERSION \}\}" when
making the next release) for a way to do this without using `kflex`.

{{range $cp := (concat (.Values.ITSes | default list) (.Values.WDSes | default list) ) }}
{{- if ne $cp.type "host" }}
kubectl config delete-context {{ $cp.name }} || true
kflex ctx {{ $cp.name }}
{{- end }}
{{- end }}

Finally you can use `kflex ctx` to switch back to the kubeconfig
context for your KubeFlex hosting cluster.
