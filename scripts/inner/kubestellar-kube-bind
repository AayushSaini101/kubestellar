#!/usr/bin/env bash

# Copyright 2023 The KubeStellar Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Currently this script only works if all invocations are in the same
# container or moral equivalent (same proces space, same filesystem)
# and with the same working directory.

# TODO: make it work for "external" users.

space_name=""
resource_to_bind=""
kubectl_flags=()
sub_flags=()

cm_namespace=kubestellar # the namespace where the configmaps live in on the provider side

while (( $# > 0 )); do
    case "$1" in
    (-h|--help)
        echo "Usage: $0 (-h | --help | -X | \$kubectl_flag | --in-cluster)* space_name resource_to_bind"
        echo "space_name is the name of a kube-bind consumer space"
        echo "resource_to_bind is a resource offered by the kube-bind provider, in lower case and plural form"
        exit 0;;
    (-X)
        set -o xtrace
	sub_flags[${#sub_flags[*]}]="$1";;
    (--in-cluster)
	sub_flags[${#sub_flags[*]}]="$1";;
    (-o|-o=*|--output|--output=*)
	echo "$0: -o and --output flags are not supported" >&2; exit 1;;
    (--*=*|-?=*)
	kubectl_flags[${#kubectl_flags[*]}]="$1";;
    (--*|-?)
        kubectl_flags[${#kubectl_flags[*]}]="$1";
	if (( $# > 1 )); then 
	    kubectl_flags[${#kubectl_flags[*]}]="$2"
	    shift
	fi;;
    (-*)
        echo "$0: flag syntax error" >&2
        exit 1;;
    (*)
        if [ -z "$space_name" ]
        then space_name="$1"
        elif [ -z "$resource_to_bind" ]
        then resource_to_bind="$1"
        else echo "$0: too many positional arguments" >&2; exit 1
        fi
    esac
    shift
done

if [ -z "$space_name" ]
then
    echo "space_name not specified" >&2
    exit 1
fi

if [ -z "$resource_to_bind" ]
then
    echo "resource_to_bind not specified" >&2
    exit 1
fi

set -e

konnector_dir="konnector-${space_name}"
konnector_log_file="${konnector_dir}/log"
finally=""

if pgrep konnector | xargs ps e -p 2>/dev/null | egrep "KB_CONSUMER=$space_name(\s|$)" &> /dev/null; then
    echo "kube-bind konnector for space $space_name already running"
    consumer_kubeconfig=$(mktemp "$space_name".kubeconfig#XXXX)
    finally="rm -f '$consumer_kubeconfig'; "
    trap "$finally" EXIT
    launch_konnector=false
else
    mkdir -p "$konnector_dir"
    consumer_kubeconfig="${konnector_dir}/kubeconfig"
    launch_konnector=true
fi

kubectl kubestellar space get-kubeconfig "${sub_flags[@]}" "${kubectl_flags[@]}" $space_name "$consumer_kubeconfig"
ORIGINAL_KUBECONFIG="$KUBECONFIG"
export KUBECONFIG="$consumer_kubeconfig"

if [ "$launch_konnector" == true ]; then
    if ! kubectl get namespace kube-system &> /dev/null; then
	kubectl apply -f - <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: kube-system
EOF
    fi
    echo "starting kube-bind konnector for space $space_name in background, logging to $konnector_log_file"
    KB_CONSUMER=$space_name konnector &> $konnector_log_file &
    sleep 10
    if ! ps -p $! &> /dev/null; then
        cat $konnector_log_file
        echo "Error: kube-bind konnector process not found" >&2
        exit 1
    fi
fi

if kubectl get crd $resource_to_bind.edge.kubestellar.io &> /dev/null; then
    echo "CRD for $resource_to_bind already in place"
    exit 0
fi

request_file=$konnector_dir/$resource_to_bind-request.yaml
finally="$finally rm -f '$request_file'; "
trap "$finally" EXIT

echo "binding $resource_to_bind for $space_name"
if ! result="$(kubectl bind http://127.0.0.1:8080/export --dry-run --skip-konnector --unattended --resource $resource_to_bind 2>&1 1>$request_file)"; then
    echo "Error occurred during binding $resource_to_bind for $space_name" >&2
    echo "Result of kubectl bind: $result" >&2
    echo "Tail of konnector's log at $konnector_log_file:" >&2
    tail $konnector_log_file >&2
    exit 1
fi

info_line="$(echo $result | grep -E 'ðŸ”’ (Updated|Created) secret .* kube-bind-\w*' -o)"
if [ -z "$info_line" ]; then
    echo "Failed to find necessary info to proceed, result of 'kubectl bind': $result" >&2
    exit 1
fi

cluster_ns="$(echo $info_line | grep 'kube-bind-\w*' -o)"
if [ -z "$cluster_ns" ]
then
    echo "Failed to find the cluster namespace, result of 'kubectl bind': $result" >&2
    exit 1
else
    echo "cluster namespace is $cluster_ns"
fi


KUBECONFIG="$ORIGINAL_KUBECONFIG"
kcs_kubeconfig="$(mktemp kcs.kubeconfig#XXXX)"
kubectl kubestellar space get-kubeconfig "${sub_flags[@]}" "${kubectl_flags[@]}" "espw" "$kcs_kubeconfig"
KUBECONFIG="$kcs_kubeconfig"

if ! kubectl get namespace "$cm_namespace" &> /dev/null
then kubectl apply -f - <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: "$cm_namespace"
EOF
else echo "namespace $cm_namespace already exists in KCS"
fi

kubectl apply -f - <<EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: kbmap-$space_name
  namespace: $cm_namespace
  labels:
    kubestellar.io/kube-bind-id: $cluster_ns
data: {}
EOF

rm $KUBECONFIG

consumer_secret_name="$(echo $info_line | grep 'kubeconfig-\w*' -o)"
if [ -z "$consumer_secret_name" ]
then
    echo "Failed to find the consumer side secret, result of 'kubectl bind': $result" >&2
    exit 1
else
    echo "consumer side secret is $consumer_secret_name"
fi

if fgrep -x "${resource_to_bind}" "$request_file"; then
    echo "The request file has junk in it; see?" >&2
    cat "$request_file" >&2
    mv "$request_file" "$request_file".junk
    fgrep -x -v "${resource_to_bind}" "$request_file".junk > "$request_file"
    echo Removed >&2
fi


KUBECONFIG="$consumer_kubeconfig"
if ! sub_result="$(kubectl bind apiservice --remote-kubeconfig-namespace kube-bind --remote-kubeconfig-name $consumer_secret_name --skip-konnector -f $request_file 2>&1)"; then
    echo "Error occurred during binding $resource_to_bind for $space_name" >&2
    echo "Result of kubectl bind apiservice: $sub_result" >&2
    echo "Request file:" >&2
    cat "$request_file" >&2
    echo >&2
    echo "Tail of konnector's log at $konnector_log_file:" >&2
    tail $konnector_log_file >&2
    exit 1
fi
