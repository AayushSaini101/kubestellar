#!/usr/bin/env bash

# Copyright 2023 The KubeStellar Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Purpose: Retrieve the kubeconfig information for a specific space

in_cluster="false"
provider_name="default"
kubectl_flags=()
space_name=""

while (( $# > 0 )); do
    case "$1" in
	(-h|--help)
	    echo "Usage: kubectl kubestellar space get-kubeconfig (\$kubectl_flag | -X | --in-cluster)* \$space_name \$output_pathname"
	    exit 0;;
	(-X) set -o xtrace;;
	(--in-cluster)
	    in_cluster="true";;
	(--*=*|-?=*)
	    kubectl_flags[${#kubectl_flags[*]}]="$1";;
	(--*|-?)
	    kubectl_flags[${#kubectl_flags[*]}]="$1";
	    if (( $# > 1 )); then 
		 kubectl_flags[${#kubectl_flags[*]}]="$2"
		 shift
	    fi;;
	(-*)
	    echo "$0: flag syntax error" >&2
	    exit 1;;
	(*)
	    if [ -z "$space_name" ]; then space_name="$1"
	    elif [ -z "$output" ]; then output="$1"
	    else echo "$0: too many positional arguments" &>2
		 exit 1
	    fi;;
    esac
    shift
done

if [ -z "$space_name" ]; then
    echo "$0: must be given a non-empty space name" >&2
    exit 1
fi

if [ -z "$output" ]; then
    echo "$0: must be given a non-empty output pathname" >&2
    exit 1
fi

set -e

space_ns="spaceprovider-${provider_name}"

secret_ctx="externalSecretRef"
if [ "$in_cluster" == "true" ]; then
    secret_ctx="inClusterSecretRef"
fi

if ! SECRET_NAME=$(kubectl "${kubectl_flags[@]}" get space ${space_name} -n ${space_ns} -o jsonpath="{$.status.${secret_ctx}.name}"); then
    echo "KUBECONFIG=$KUBECONFIG" >&2
    echo "Current context is $(kubectl config current-context)" >&2
    echo "space_name=$space_name"
    false
fi
echo "SECRET_NAME=${SECRET_NAME}"
SECRET_NAMESPACE=$(kubectl "${kubectl_flags[@]}" get space ${space_name} -n ${space_ns} -o jsonpath="{$.status.${secret_ctx}.namespace}")
echo "SECRET_NAMESPACE=${SECRET_NAMESPACE}"

kubectl "${kubectl_flags[@]}" get secret ${SECRET_NAME} -n ${SECRET_NAMESPACE} -o jsonpath='{$.data.kubeconfig}' | base64 -d | base64 -d > $output

